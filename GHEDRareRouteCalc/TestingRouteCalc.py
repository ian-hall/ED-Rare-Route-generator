import unittest
from routecalc import RouteCalc
from edsystem import EDSystem
from edrareroute import EDRareRoute, FitnessType
import main
import random

class Test_TestingRouteCalc(unittest.TestCase):
#------------------------------------------------------------------------------
    def setUp(self):
        self.All_Systems = main.ReadSystems('RareGoods.csv')
        self.Pop_Size = 555
        self.Route_Length = 8
        self.Population = []
        self.Fit_Type = FitnessType.FirstOver

        for i in range(0,self.Pop_Size):
            tempSystemList = []
            for j in range(0,self.Route_Length):
                tempSystem = random.choice(self.All_Systems)                  
                while tempSystemList.count(tempSystem) != 0:
                    tempSystem = random.choice(self.All_Systems)
                tempSystemList.append(tempSystem)
            self.Population.append(EDRareRoute(tempSystemList,self.Fit_Type ))
        RouteCalc.SetValidSystems(self.All_Systems)
        return super().setUp()
#------------------------------------------------------------------------------
    def test_SelectionVals(self):
        '''
        Testing that the first/last values are as expected, and also checking that the returned list is in sort, increasing order
        '''
        selectVals = RouteCalc.WrapRelativeFitness(self.Population)
        self.assertEqual(self.Pop_Size,selectVals.__len__())

        selectMult = RouteCalc.GetSelectionMult()
        lastVal = selectMult * self.Pop_Size
        self.assertAlmostEqual(lastVal,selectVals[-1])

        popSum = sum([val.GetFitValue() for val in self.Population])
        firstVal = self.Population[0].GetFitValue()/popSum * lastVal
        self.assertEqual(firstVal,selectVals[0])
        
        for i in range(500):
            with self.subTest(i==i):
                index = random.randrange(1,self.Pop_Size)
                randSelectVal = selectVals[index]
                randRoute = self.Population[index]
                calcVal = (randRoute.GetFitValue()/popSum * lastVal) + selectVals[index-1]
                self.assertAlmostEqual(calcVal,randSelectVal)


        self.assertListEqual(selectVals,sorted(selectVals))
#------------------------------------------------------------------------------
    def test_Reprodudce(self):
        '''
        Test that a minimum number of new systems are generated by the reproduce function
        '''
        maxNumIn = self.Pop_Size * 0.05
        numIn = 0
        selectVals = RouteCalc.WrapRelativeFitness(self.Population)
        for i in range(self.Pop_Size):
            children = [EDRareRoute(val,self.Fit_Type) for val in RouteCalc.WrapReproduce(self.Population,selectVals)]
            for child in children:
                if child in self.Population:
                    numIn += 1

        self.assertTrue(numIn <= maxNumIn)
#------------------------------------------------------------------------------
    def test_Mutate(self):
        pass
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
if __name__ == '__main__':
    unittest.main()
